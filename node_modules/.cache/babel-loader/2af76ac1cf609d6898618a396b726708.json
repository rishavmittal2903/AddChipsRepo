{"ast":null,"code":"import _classCallCheck from \"C:\\\\ReactMagic\\\\AddChipsRepo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\ReactMagic\\\\AddChipsRepo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\ReactMagic\\\\AddChipsRepo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\ReactMagic\\\\AddChipsRepo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\ReactMagic\\\\AddChipsRepo\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\ReactMagic\\\\AddChipsRepo\\\\src\\\\Components\\\\ChipListComponent.js\";\nimport React from \"react\";\nimport { addChipInList as _addChipInList, RemoveChip, HighlightChip } from \"../Actions/ChipReducerAction\";\nimport { connect } from \"react-redux\";\nimport { DebounceInput } from 'react-debounce-input';\nimport SelectedChip from \"./SelectedChipList\";\n\nvar ChipList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ChipList, _React$Component);\n\n  function ChipList() {\n    var _this;\n\n    _classCallCheck(this, ChipList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ChipList).call(this));\n    _this.inputRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(ChipList, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(prev, next) {\n      return prev !== next;\n    }\n  }, {\n    key: \"handleSelectName\",\n    value: function handleSelectName() {\n      var that = this;\n      var listedData = this.props.chipReducer.itemList.filter(function (data) {\n        return data.itemName == that.inputRef.current.state.value ? data : false;\n      });\n\n      if (listedData.length > 0) {\n        that.props.addChipInList(listedData[0]);\n        document.getElementById(\"filterChip\").value = '';\n        that.inputRef.current.state.value = \"\";\n      }\n    }\n  }, {\n    key: \"keyHandler\",\n    value: function keyHandler(e) {\n      var that = this;\n\n      if (e.keyCode == 8) {\n        this.keyActions(e);\n      }\n    }\n  }, {\n    key: \"keyActions\",\n    value: function keyActions(e) {\n      var that = this;\n      var itemNm = that.props.chipReducer.selectedList.filter(function (data) {\n        return data.highlight == true ? data : null;\n      });\n\n      if (e.target.value == \"\" && that.props.chipReducer.selectedList.length > 0 && itemNm.length > 0) {\n        that.props.removeChipFromList(itemNm[0].itemName);\n      } else if (e.target.value == \"\" && that.props.chipReducer.selectedList.length > 0) {\n        that.props.HighlightItem();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var that = this;\n      return React.createElement(\"div\", {\n        className: \"Main\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"txtHeader\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Add chips assignment\"), React.createElement(\"section\", {\n        className: \"chipDashboard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"selectedOne\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, that.props.chipReducer.selectedList.length > 0 ? React.createElement(SelectedChip, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }) : null), React.createElement(\"div\", {\n        className: \"filter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(DebounceInput, {\n        list: \"chips\",\n        name: \"chips\",\n        minLength: 2,\n        ref: this.inputRef,\n        id: \"filterChip\",\n        className: \"chipInput\",\n        onKeyDown: that.keyHandler.bind(this),\n        debounceTimeout: 300,\n        onChange: function onChange() {\n          return that.handleSelectName(_this2);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(\"datalist\", {\n        id: \"chips\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, that.props.chipReducer.itemList.map(function (data, key) {\n        return React.createElement(\"option\", {\n          value: data.itemName,\n          key: key,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, data.itemEmailId);\n      })))));\n    }\n  }]);\n\n  return ChipList;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    chipReducer: state.ChipItemReducer\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    addChipInList: function addChipInList(value) {\n      dispatch(_addChipInList(value));\n    },\n    removeChipFromList: function removeChipFromList(value) {\n      dispatch(RemoveChip(value));\n    },\n    HighlightItem: function HighlightItem(value) {\n      dispatch(HighlightChip());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChipList);","map":{"version":3,"sources":["C:\\ReactMagic\\AddChipsRepo\\src\\Components\\ChipListComponent.js"],"names":["React","addChipInList","RemoveChip","HighlightChip","connect","DebounceInput","SelectedChip","ChipList","inputRef","createRef","prev","next","that","listedData","props","chipReducer","itemList","filter","data","itemName","current","state","value","length","document","getElementById","e","keyCode","keyActions","itemNm","selectedList","highlight","target","removeChipFromList","HighlightItem","keyHandler","bind","handleSelectName","map","key","itemEmailId","Component","mapStateToProps","ChipItemReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  addChipInList,\r\n  RemoveChip,\r\n  HighlightChip\r\n} from \"../Actions/ChipReducerAction\";\r\nimport { connect } from \"react-redux\";\r\nimport {DebounceInput} from 'react-debounce-input';\r\nimport SelectedChip from \"./SelectedChipList\";\r\nclass ChipList extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.inputRef = React.createRef();\r\n  }\r\n  shouldComponentUpdate(prev, next) {\r\n    return prev !== next;\r\n   \r\n     }\r\n  handleSelectName()\r\n  {\r\n    var that=this;\r\n    let listedData=this.props.chipReducer.itemList.filter(function(data){\r\n      return data.itemName==that.inputRef.current.state.value?data:false\r\n    })\r\n    if(listedData.length>0)\r\n    {\r\nthat.props.addChipInList(listedData[0]);\r\ndocument.getElementById(\"filterChip\").value='';\r\nthat.inputRef.current.state.value=\"\";\r\n    }\r\n  }\r\n  keyHandler(e) {\r\n    var that = this;\r\n    if (e.keyCode == 8) \r\n    {\r\n    this.keyActions(e);\r\n  }\r\n  }\r\n  keyActions(e)\r\n  {\r\n    var that=this;\r\n    var itemNm = that.props.chipReducer.selectedList.filter(function(data) {\r\n      return data.highlight == true ? data : null;\r\n    });\r\n    if(e.target.value==\"\" && that.props.chipReducer.selectedList.length>0&&itemNm.length>0)\r\n    {\r\n      that.props.removeChipFromList(itemNm[0].itemName);\r\n    }\r\n    else if(e.target.value==\"\" && that.props.chipReducer.selectedList.length>0)\r\n    {\r\n      that.props.HighlightItem();\r\n    }\r\n  }\r\n  render() {\r\n    var that = this;\r\n    \r\n    return (\r\n      <div className=\"Main\">\r\n      <h1 className=\"txtHeader\">Add chips assignment</h1>\r\n      <section className=\"chipDashboard\">\r\n      <div className=\"selectedOne\">{that.props.chipReducer.selectedList.length > 0 ? <SelectedChip/>:null}</div>\r\n        <div className=\"filter\"><DebounceInput\r\n          list=\"chips\" name=\"chips\"\r\n          minLength={2}\r\n          ref={this.inputRef}\r\n          id=\"filterChip\"\r\n          className=\"chipInput\"\r\n          onKeyDown={that.keyHandler.bind(this)}\r\n          debounceTimeout={300}\r\n          onChange={()=>that.handleSelectName(this)} />\r\n         <datalist id=\"chips\" >\r\n           {that.props.chipReducer.itemList.map(function(data,key){\r\n  return(\r\n    <option value={data.itemName} key={key}>\r\n       {data.itemEmailId}\r\n    </option>\r\n    \r\n  )\r\n  \r\n})}\r\n</datalist>\r\n</div>\r\n      </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    chipReducer: state.ChipItemReducer\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addChipInList: value => {\r\n      dispatch(addChipInList(value));\r\n    },\r\n    removeChipFromList: value => {\r\n      dispatch(RemoveChip(value));\r\n    },\r\n    HighlightItem: value => {\r\n      dispatch(HighlightChip());\r\n    }\r\n  };\r\n};\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ChipList);\r\n"]},"metadata":{},"sourceType":"module"}